{"ast":null,"code":"import { get, groupBy, reject, maxBy, minBy } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ETHER_ADDRESS, ether, tokens } from '../helpers'; // TODO: Move me to helpers file\n\nexport const formatBalance = balance => {\n  const precision = 100; // 2 decimal places\n\n  balance = ether(balance);\n  balance = Math.round(balance * precision) / precision; // Use 2 decimal places\n\n  return balance;\n};\n\nconst account = state => get(state, 'web3.account');\n\nexport const accountSelector = createSelector(account, a => a);\n\nconst web3 = state => get(state, 'web3.connection');\n\nexport const web3Selector = createSelector(web3, w => w);\n\nconst tokenLoaded = state => get(state, 'token.loaded', false);\n\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl);\n\nconst token = state => get(state, 'token.contract');\n\nexport const tokenSelector = createSelector(token, t => t);\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false);\n\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el);\n\nconst exchange = state => get(state, 'exchange.contract');\n\nexport const exchangeSelector = createSelector(exchange, e => e);\nexport const contractsLoadedSelector = createSelector(tokenLoaded, exchangeLoaded, (tl, el) => tl && el); // All Orders\n\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false);\n\nconst allOrders = state => get(state, 'exchange.allOrders.data', []); // Cancelled orders\n\n\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false);\n\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded);\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', []);\n\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o); // Filled Orders\n\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false);\n\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded); // const filledOrders = state => get(state, 'exchange.filledOrders.data', [])\n// export const filledOrdersSelector = createSelector(\n//   filledOrders,\n//   (orders) => {\n//     // Sort orders by date ascending for price comparison\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate the orders\n//     orders = decorateFilledOrders(orders)\n//     // Sort orders by date descending for display\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n// const decorateFilledOrders = (orders) => {\n//   // Track previous order to compare history\n//   let previousOrder = orders[0]\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateFilledOrder(order, previousOrder)\n//       previousOrder = order // Update the previous order once it's decorated\n//       return order\n//     })\n//   )\n// }\n\nconst decorateOrder = order => {\n  let etherAmount;\n  let tokenAmount;\n\n  if (order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive;\n    tokenAmount = order.amountGet;\n  } else {\n    etherAmount = order.amountGet;\n    tokenAmount = order.amountGive;\n  } // Calculate token price to 5 decimal places\n\n\n  const precision = 100000;\n  let tokenPrice = etherAmount / tokenAmount;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n  return { ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  };\n}; // const decorateFilledOrder = (order, previousOrder) => {\n//   return({\n//     ...order,\n//     tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n//   })\n// }\n// const tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n//   // Show green price if only one order exists\n//   if(previousOrder.id === orderId) {\n//     return GREEN\n//   }\n//   // Show green price if order price higher than previous order\n//   // Show red price if order price lower than previous order\n//   if(previousOrder.tokenPrice <= tokenPrice) {\n//     return GREEN // success\n//   } else {\n//     return RED // danger\n//   }\n// }\n\n\nconst openOrders = state => {\n  const all = allOrders(state);\n  const filled = filledOrders(state);\n  const cancelled = cancelledOrders(state);\n  const openOrders = reject(all, order => {\n    const orderFilled = filled.some(o => o.id === order.id);\n    const orderCancelled = cancelled.some(o => o.id === order.id);\n    return orderFilled || orderCancelled;\n  });\n  return openOrders;\n};\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state);\n\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded); // Create the order book\n// export const orderBookSelector = createSelector(\n//   openOrders,\n//   (orders) => {\n//     // Decorate orders\n//     orders = decorateOrderBookOrders(orders)\n//     // Group orders by \"orderType\"\n//     orders = groupBy(orders, 'orderType')\n//     // Fetch buy orders\n//     const buyOrders = get(orders, 'buy', [])\n//     // Sort buy orders by token price\n//     orders = {\n//       ...orders,\n//       buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     // Fetch sell orders\n//     const sellOrders = get(orders, 'sell', [])\n//     // Sort sell orders by token price\n//     orders = {\n//       ...orders,\n//       sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     return orders\n//   }\n// )\n// const decorateOrderBookOrders = (orders) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateOrderBookOrder(order)\n//       return(order)\n//     })\n//   )\n// }\n// const decorateOrderBookOrder = (order) => {\n//   const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n//   })\n// }\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded); // export const myFilledOrdersSelector = createSelector(\n//   account,\n//   filledOrders,\n//   (account, orders) => {\n//     // Find our orders\n//     orders = orders.filter((o) => o.user === account || o.userFill === account)\n//     // Sort by date ascending\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyFilledOrders(orders, account)\n//     return orders\n//   }\n// )\n// const decorateMyFilledOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyFilledOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n// const decorateMyFilledOrder = (order, account) => {\n//   const myOrder = order.user === account\n//   let orderType\n//   if(myOrder) {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   } else {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n//   }\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderSign: (orderType === 'buy' ? '+' : '-')\n//   })\n// }\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded); // export const myOpenOrdersSelector = createSelector(\n//   account,\n//   openOrders,\n//   (account, orders) => {\n//     // Filter orders created by current account\n//     orders = orders.filter((o) => o.user === account)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyOpenOrders(orders)\n//     // Sort orders by date descending\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n// const decorateMyOpenOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyOpenOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n// const decorateMyOpenOrder = (order, account) => {\n//   let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n//   })\n// }\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded);\nexport const priceChartSelector = createSelector(filledOrders, orders => {\n  // Sort orders by date ascending to compare history\n  orders = orders.sort((a, b) => a.timestamp - b.timestamp); // Decorate orders - add display attributes\n\n  orders = orders.map(o => decorateOrder(o)); // Get last 2 order for final price & price change\n\n  let secondLastOrder, lastOrder;\n  [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length); // get last order price\n\n  const lastPrice = get(lastOrder, 'tokenPrice', 0); // get second last order price\n\n  const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0);\n  return {\n    lastPrice,\n    lastPriceChange: lastPrice >= secondLastPrice ? '+' : '-',\n    series: [{\n      data: buildGraphData(orders)\n    }]\n  };\n});\n\nconst buildGraphData = orders => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, o => moment.unix(o.timestamp).startOf('hour').format()); // Get each hour where data exists\n\n  const hours = Object.keys(orders); // Build the graph series\n\n  const graphData = hours.map(hour => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]; // Calculate price values - open, high, low, close\n\n    const open = group[0]; // first order\n\n    const high = maxBy(group, 'tokenPrice'); // high price\n\n    const low = minBy(group, 'tokenPrice'); // low price\n\n    const close = group[group.length - 1]; // last order\n\n    return {\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    };\n  });\n  return graphData;\n};\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false);\n\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status);\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false);\n\nexport const orderFillingSelector = createSelector(orderFilling, status => status); // BALANCES\n\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true);\n\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status);\n\nconst etherBalance = state => get(state, 'web3.balance', 0);\n\nexport const etherBalanceSelector = createSelector(etherBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst tokenBalance = state => get(state, 'token.balance', 0);\n\nexport const tokenBalanceSelector = createSelector(tokenBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0);\n\nexport const exchangeEtherBalanceSelector = createSelector(exchangeEtherBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0);\n\nexport const exchangeTokenBalanceSelector = createSelector(exchangeTokenBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null);\n\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount);\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null);\n\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount);\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null);\n\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount);\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null);\n\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount);\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {});\n\nexport const buyOrderSelector = createSelector(buyOrder, order => order);\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {});\n\nexport const sellOrderSelector = createSelector(sellOrder, order => order);","map":{"version":3,"sources":["/Users/papealioune/Documents/GitHub/Tulk/src/redux/selectors.js"],"names":["get","groupBy","reject","maxBy","minBy","createSelector","moment","ETHER_ADDRESS","ether","tokens","formatBalance","balance","precision","Math","round","account","state","accountSelector","a","web3","web3Selector","w","tokenLoaded","tokenLoadedSelector","tl","token","tokenSelector","t","exchangeLoaded","exchangeLoadedSelector","el","exchange","exchangeSelector","e","contractsLoadedSelector","allOrdersLoaded","allOrders","cancelledOrdersLoaded","cancelledOrdersLoadedSelector","loaded","cancelledOrders","cancelledOrdersSelector","o","filledOrdersLoaded","filledOrdersLoadedSelector","decorateOrder","order","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","tokenPrice","formattedTimestamp","unix","timestamp","format","openOrders","all","filled","filledOrders","cancelled","orderFilled","some","id","orderCancelled","orderBookLoaded","orderBookLoadedSelector","myFilledOrdersLoadedSelector","myOpenOrdersLoadedSelector","priceChartLoadedSelector","priceChartSelector","orders","sort","b","map","secondLastOrder","lastOrder","slice","length","lastPrice","secondLastPrice","lastPriceChange","series","data","buildGraphData","startOf","hours","Object","keys","graphData","hour","group","open","high","low","close","x","Date","y","orderCancelling","orderCancellingSelector","status","orderFilling","orderFillingSelector","balancesLoading","balancesLoadingSelector","etherBalance","etherBalanceSelector","tokenBalance","tokenBalanceSelector","exchangeEtherBalance","exchangeEtherBalanceSelector","exchangeTokenBalance","exchangeTokenBalanceSelector","etherDepositAmount","etherDepositAmountSelector","amount","etherWithdrawAmount","etherWithdrawAmountSelector","tokenDepositAmount","tokenDepositAmountSelector","tokenWithdrawAmount","tokenWithdrawAmountSelector","buyOrder","buyOrderSelector","sellOrder","sellOrderSelector"],"mappings":"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qB,CAACrB,KAAD,CAArB,IAAgC2B,kBAAkB,CAAC3B,KAAD,CAAlD,IAA6DmB,eAAe,CAACnB,KAAD,CAA7G;;AACA,OAAO,MAAMmD,uBAAuB,GAAG9D,cAAc,CAAC6D,eAAD,EAAkB3B,MAAM,IAAIA,MAA5B,CAA9C,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM6B,4BAA4B,GAAG/D,cAAc,CAACsC,kBAAD,EAAqBJ,MAAM,IAAIA,MAA/B,CAAnD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM8B,0BAA0B,GAAGhE,cAAc,CAAC6D,eAAD,EAAkB3B,MAAM,IAAIA,MAA5B,CAAjD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM+B,wBAAwB,GAAGjE,cAAc,CAACsC,kBAAD,EAAqBJ,MAAM,IAAIA,MAA/B,CAA/C;AAEP,OAAO,MAAMgC,kBAAkB,GAAGlE,cAAc,CAC9CuD,YAD8C,EAE7CY,MAAD,IAAY;AACV;AACAA,EAAAA,MAAM,GAAGA,MAAM,CAACC,IAAP,CAAY,CAACvD,CAAD,EAAGwD,CAAH,KAASxD,CAAC,CAACqC,SAAF,GAAcmB,CAAC,CAACnB,SAArC,CAAT,CAFU,CAGV;;AACAiB,EAAAA,MAAM,GAAGA,MAAM,CAACG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","sourcesContent":["import { get, groupBy, reject, maxBy, minBy } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, ether, tokens } from '../helpers'\n\n// TODO: Move me to helpers file\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision // Use 2 decimal places\n\n  return balance\n}\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => (tl && el)\n)\n\n// All Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\n\n// Cancelled orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\n// const filledOrders = state => get(state, 'exchange.filledOrders.data', [])\n// export const filledOrdersSelector = createSelector(\n//   filledOrders,\n//   (orders) => {\n//     // Sort orders by date ascending for price comparison\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate the orders\n//     orders = decorateFilledOrders(orders)\n//     // Sort orders by date descending for display\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n\n// const decorateFilledOrders = (orders) => {\n//   // Track previous order to compare history\n//   let previousOrder = orders[0]\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateFilledOrder(order, previousOrder)\n//       previousOrder = order // Update the previous order once it's decorated\n//       return order\n//     })\n//   )\n// }\n\nconst decorateOrder = (order) => {\n  let etherAmount\n  let tokenAmount\n\n  if(order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive\n    tokenAmount = order.amountGet\n  } else {\n    etherAmount = order.amountGet\n    tokenAmount = order.amountGive\n  }\n\n  // Calculate token price to 5 decimal places\n  const precision = 100000\n  let tokenPrice = (etherAmount / tokenAmount)\n  tokenPrice = Math.round(tokenPrice * precision) / precision\n\n  return({\n    ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  })\n}\n\n// const decorateFilledOrder = (order, previousOrder) => {\n//   return({\n//     ...order,\n//     tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n//   })\n// }\n\n// const tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n//   // Show green price if only one order exists\n//   if(previousOrder.id === orderId) {\n//     return GREEN\n//   }\n\n//   // Show green price if order price higher than previous order\n//   // Show red price if order price lower than previous order\n//   if(previousOrder.tokenPrice <= tokenPrice) {\n//     return GREEN // success\n//   } else {\n//     return RED // danger\n//   }\n// }\n\nconst openOrders = state => {\n  const all = allOrders(state)\n  const filled = filledOrders(state)\n  const cancelled = cancelledOrders(state)\n\n  const openOrders = reject(all, (order) => {\n    const orderFilled = filled.some((o) => o.id === order.id)\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\n    return(orderFilled || orderCancelled)\n  })\n\n  return openOrders\n}\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// Create the order book\n// export const orderBookSelector = createSelector(\n//   openOrders,\n//   (orders) => {\n//     // Decorate orders\n//     orders = decorateOrderBookOrders(orders)\n//     // Group orders by \"orderType\"\n//     orders = groupBy(orders, 'orderType')\n//     // Fetch buy orders\n//     const buyOrders = get(orders, 'buy', [])\n//     // Sort buy orders by token price\n//     orders = {\n//       ...orders,\n//       buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     // Fetch sell orders\n//     const sellOrders = get(orders, 'sell', [])\n//     // Sort sell orders by token price\n//     orders = {\n//       ...orders,\n//       sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     return orders\n//   }\n// )\n\n// const decorateOrderBookOrders = (orders) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateOrderBookOrder(order)\n//       return(order)\n//     })\n//   )\n// }\n\n// const decorateOrderBookOrder = (order) => {\n//   const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n//   })\n// }\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\n// export const myFilledOrdersSelector = createSelector(\n//   account,\n//   filledOrders,\n//   (account, orders) => {\n//     // Find our orders\n//     orders = orders.filter((o) => o.user === account || o.userFill === account)\n//     // Sort by date ascending\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyFilledOrders(orders, account)\n//     return orders\n//   }\n// )\n\n// const decorateMyFilledOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyFilledOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n\n// const decorateMyFilledOrder = (order, account) => {\n//   const myOrder = order.user === account\n\n//   let orderType\n//   if(myOrder) {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   } else {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n//   }\n\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderSign: (orderType === 'buy' ? '+' : '-')\n//   })\n// }\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// export const myOpenOrdersSelector = createSelector(\n//   account,\n//   openOrders,\n//   (account, orders) => {\n//     // Filter orders created by current account\n//     orders = orders.filter((o) => o.user === account)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyOpenOrders(orders)\n//     // Sort orders by date descending\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n\n// const decorateMyOpenOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyOpenOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n\n// const decorateMyOpenOrder = (order, account) => {\n//   let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n//   })\n// }\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const priceChartSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending to compare history\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = orders.map((o) => decorateOrder(o))\n    // Get last 2 order for final price & price change\n    let secondLastOrder, lastOrder\n    [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\n    // get last order price\n    const lastPrice = get(lastOrder, 'tokenPrice', 0)\n    // get second last order price\n    const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n\n    return({\n      lastPrice,\n      lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n      series: [{\n        data: buildGraphData(orders)\n      }]\n    })\n  }\n)\n\nconst buildGraphData = (orders) => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\n  // Get each hour where data exists\n  const hours = Object.keys(orders)\n  // Build the graph series\n  const graphData = hours.map((hour) => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]\n    // Calculate price values - open, high, low, close\n    const open = group[0] // first order\n    const high = maxBy(group, 'tokenPrice') // high price\n    const low = minBy(group, 'tokenPrice') // low price\n    const close = group[group.length - 1] // last order\n\n    return({\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    })\n  })\n\n  return graphData\n}\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\n\n// BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\nexport const sellOrderSelector = createSelector(sellOrder, order => order)\n"]},"metadata":{},"sourceType":"module"}