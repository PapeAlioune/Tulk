{"ast":null,"code":"import { get, groupBy, maxBy, minBy } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ether } from '../helpers'; // TODO: Move me to helpers file\n\nexport const formatBalance = balance => {\n  const precision = 100; // 2 decimal places\n\n  balance = ether(balance);\n  balance = Math.round(balance * precision) / precision; // Use 2 decimal places\n\n  return balance;\n};\n\nconst account = state => get(state, 'web3.account');\n\nexport const accountSelector = createSelector(account, a => a);\n\nconst web3 = state => get(state, 'web3.connection');\n\nexport const web3Selector = createSelector(web3, w => w);\n\nconst tokenLoaded = state => get(state, 'token.loaded', false);\n\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl);\n\nconst token = state => get(state, 'token.contract');\n\nexport const tokenSelector = createSelector(token, t => t);\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false);\n\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el);\n\nconst exchange = state => get(state, 'exchange.contract');\n\nexport const exchangeSelector = createSelector(exchange, e => e);\nexport const contractsLoadedSelector = createSelector(tokenLoaded, exchangeLoaded, (tl, el) => tl && el); // All Orders\n\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false);\n\nconst allOrders = state => get(state, 'exchange.allOrders.data', []); // Cancelled orders\n\n\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false);\n\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded);\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', []);\n\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o); // Filled Orders\n\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false);\n\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded); // const filledOrders = state => get(state, 'exchange.filledOrders.data', [])\n// export const filledOrdersSelector = createSelector(\n//   filledOrders,\n//   (orders) => {\n//     // Sort orders by date ascending for price comparison\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate the orders\n//     orders = decorateFilledOrders(orders)\n//     // Sort orders by date descending for display\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n// const decorateFilledOrders = (orders) => {\n//   // Track previous order to compare history\n//   let previousOrder = orders[0]\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateFilledOrder(order, previousOrder)\n//       previousOrder = order // Update the previous order once it's decorated\n//       return order\n//     })\n//   )\n// }\n// const decorateOrder = (order) => {\n//   let etherAmount\n//   let tokenAmount\n//   if(order.tokenGive === ETHER_ADDRESS) {\n//     etherAmount = order.amountGive\n//     tokenAmount = order.amountGet\n//   } else {\n//     etherAmount = order.amountGet\n//     tokenAmount = order.amountGive\n//   }\n//   // Calculate token price to 5 decimal places\n//   const precision = 100000\n//   let tokenPrice = (etherAmount / tokenAmount)\n//   tokenPrice = Math.round(tokenPrice * precision) / precision\n//   return({\n//     ...order,\n//     etherAmount: ether(etherAmount),\n//     tokenAmount: tokens(tokenAmount),\n//     tokenPrice,\n//     formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n//   })\n// }\n// const decorateFilledOrder = (order, previousOrder) => {\n//   return({\n//     ...order,\n//     tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n//   })\n// }\n// const tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n//   // Show green price if only one order exists\n//   if(previousOrder.id === orderId) {\n//     return GREEN\n//   }\n//   // Show green price if order price higher than previous order\n//   // Show red price if order price lower than previous order\n//   if(previousOrder.tokenPrice <= tokenPrice) {\n//     return GREEN // success\n//   } else {\n//     return RED // danger\n//   }\n// }\n// const openOrders = state => {\n//   const all = allOrders(state)\n//   const filled = filledOrders(state)\n//   const cancelled = cancelledOrders(state)\n//   const openOrders = reject(all, (order) => {\n//     const orderFilled = filled.some((o) => o.id === order.id)\n//     const orderCancelled = cancelled.some((o) => o.id === order.id)\n//     return(orderFilled || orderCancelled)\n//   })\n//   return openOrders\n// }\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state);\n\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded); // Create the order book\n// export const orderBookSelector = createSelector(\n//   openOrders,\n//   (orders) => {\n//     // Decorate orders\n//     orders = decorateOrderBookOrders(orders)\n//     // Group orders by \"orderType\"\n//     orders = groupBy(orders, 'orderType')\n//     // Fetch buy orders\n//     const buyOrders = get(orders, 'buy', [])\n//     // Sort buy orders by token price\n//     orders = {\n//       ...orders,\n//       buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     // Fetch sell orders\n//     const sellOrders = get(orders, 'sell', [])\n//     // Sort sell orders by token price\n//     orders = {\n//       ...orders,\n//       sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     return orders\n//   }\n// )\n// const decorateOrderBookOrders = (orders) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateOrderBookOrder(order)\n//       return(order)\n//     })\n//   )\n// }\n// const decorateOrderBookOrder = (order) => {\n//   const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n//   })\n// }\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded); // export const myFilledOrdersSelector = createSelector(\n//   account,\n//   filledOrders,\n//   (account, orders) => {\n//     // Find our orders\n//     orders = orders.filter((o) => o.user === account || o.userFill === account)\n//     // Sort by date ascending\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyFilledOrders(orders, account)\n//     return orders\n//   }\n// )\n// const decorateMyFilledOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyFilledOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n// const decorateMyFilledOrder = (order, account) => {\n//   const myOrder = order.user === account\n//   let orderType\n//   if(myOrder) {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   } else {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n//   }\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderSign: (orderType === 'buy' ? '+' : '-')\n//   })\n// }\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded); // export const myOpenOrdersSelector = createSelector(\n//   account,\n//   openOrders,\n//   (account, orders) => {\n//     // Filter orders created by current account\n//     orders = orders.filter((o) => o.user === account)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyOpenOrders(orders)\n//     // Sort orders by date descending\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n// const decorateMyOpenOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyOpenOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n// const decorateMyOpenOrder = (order, account) => {\n//   let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n//   })\n// }\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded); // export const priceChartSelector = createSelector(\n//   filledOrders,\n//   (orders) => {\n//     // Sort orders by date ascending to compare history\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate orders - add display attributes\n//     orders = orders.map((o) => decorateOrder(o))\n//     // Get last 2 order for final price & price change\n//     let secondLastOrder, lastOrder\n//     [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\n//     // get last order price\n//     const lastPrice = get(lastOrder, 'tokenPrice', 0)\n//     // get second last order price\n//     const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n//     return({\n//       lastPrice,\n//       lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n//       series: [{\n//         data: buildGraphData(orders)\n//       }]\n//     })\n//   }\n// )\n\nconst buildGraphData = orders => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, o => moment.unix(o.timestamp).startOf('hour').format()); // Get each hour where data exists\n\n  const hours = Object.keys(orders); // Build the graph series\n\n  const graphData = hours.map(hour => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]; // Calculate price values - open, high, low, close\n\n    const open = group[0]; // first order\n\n    const high = maxBy(group, 'tokenPrice'); // high price\n\n    const low = minBy(group, 'tokenPrice'); // low price\n\n    const close = group[group.length - 1]; // last order\n\n    return {\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    };\n  });\n  return graphData;\n};\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false);\n\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status);\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false);\n\nexport const orderFillingSelector = createSelector(orderFilling, status => status); // BALANCES\n\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true);\n\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status);\n\nconst etherBalance = state => get(state, 'web3.balance', 0);\n\nexport const etherBalanceSelector = createSelector(etherBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst tokenBalance = state => get(state, 'token.balance', 0);\n\nexport const tokenBalanceSelector = createSelector(tokenBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0);\n\nexport const exchangeEtherBalanceSelector = createSelector(exchangeEtherBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0);\n\nexport const exchangeTokenBalanceSelector = createSelector(exchangeTokenBalance, balance => {\n  return formatBalance(balance);\n});\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null);\n\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount);\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null);\n\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount);\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null);\n\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount);\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null);\n\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount);\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {});\n\nexport const buyOrderSelector = createSelector(buyOrder, order => order);\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {});\n\nexport const sellOrderSelector = createSelector(sellOrder, order => order);","map":{"version":3,"sources":["/Users/papealioune/Documents/GitHub/Tulk/src/redux/selectors.js"],"names":["get","groupBy","maxBy","minBy","createSelector","moment","ether","formatBalance","balance","precision","Math","round","account","state","accountSelector","a","web3","web3Selector","w","tokenLoaded","tokenLoadedSelector","tl","token","tokenSelector","t","exchangeLoaded","exchangeLoadedSelector","el","exchange","exchangeSelector","e","contractsLoadedSelector","allOrdersLoaded","allOrders","cancelledOrdersLoaded","cancelledOrdersLoadedSelector","loaded","cancelledOrders","cancelledOrdersSelector","o","filledOrdersLoaded","filledOrdersLoadedSelector","orderBookLoaded","orderBookLoadedSelector","myFilledOrdersLoadedSelector","myOpenOrdersLoadedSelector","priceChartLoadedSelector","buildGraphData","orders","unix","timestamp","startOf","format","hours","Object","keys","graphData","map","hour","group","open","high","low","close","length","x","Date","y","tokenPrice","orderCancelling","orderCancellingSelector","status","orderFilling","orderFillingSelector","balancesLoading","balancesLoadingSelector","etherBalance","etherBalanceSelector","tokenBalance","tokenBalanceSelector","exchangeEtherBalance","exchangeEtherBalanceSelector","exchangeTokenBalance","exchangeTokenBalanceSelector","etherDepositAmount","etherDepositAmountSelector","amount","etherWithdrawAmount","etherWithdrawAmountSelector","tokenDepositAmount","tokenDepositAmountSelector","tokenWithdrawAmount","tokenWithdrawAmountSelector","buyOrder","buyOrderSelector","order","sellOrder","sellOrderSelector"],"mappings":"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AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGA,MAAMM,eAAe,GAAG7B,KAAK,IAAIqB,qBAAqB,CAACrB,KAAD,CAArB,IAAgC2B,kBAAkB,CAAC3B,KAAD,CAAlD,IAA6DmB,eAAe,CAACnB,KAAD,CAA7G;;AACA,OAAO,MAAM8B,uBAAuB,GAAGvC,cAAc,CAACsC,eAAD,EAAkBN,MAAM,IAAIA,MAA5B,CAA9C,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMQ,4BAA4B,GAAGxC,cAAc,CAACoC,kBAAD,EAAqBJ,MAAM,IAAIA,MAA/B,CAAnD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMS,0BAA0B,GAAGzC,cAAc,CAACsC,eAAD,EAAkBN,MAAM,IAAIA,MAA5B,CAAjD,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,wBAAwB,GAAG1C,cAAc,CAACoC,kBAAD,EAAqBJ,MAAM,IAAIA,MAA/B,CAA/C,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMW,cAAc,GAAIC,MAAD,IAAY;AACjC;AACAA,EA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","sourcesContent":["import { get, groupBy, maxBy, minBy } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ether } from '../helpers'\n\n// TODO: Move me to helpers file\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision // Use 2 decimal places\n\n  return balance\n}\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => (tl && el)\n)\n\n// All Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\n\n// Cancelled orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\n// const filledOrders = state => get(state, 'exchange.filledOrders.data', [])\n// export const filledOrdersSelector = createSelector(\n//   filledOrders,\n//   (orders) => {\n//     // Sort orders by date ascending for price comparison\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate the orders\n//     orders = decorateFilledOrders(orders)\n//     // Sort orders by date descending for display\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n\n// const decorateFilledOrders = (orders) => {\n//   // Track previous order to compare history\n//   let previousOrder = orders[0]\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateFilledOrder(order, previousOrder)\n//       previousOrder = order // Update the previous order once it's decorated\n//       return order\n//     })\n//   )\n// }\n\n// const decorateOrder = (order) => {\n//   let etherAmount\n//   let tokenAmount\n\n//   if(order.tokenGive === ETHER_ADDRESS) {\n//     etherAmount = order.amountGive\n//     tokenAmount = order.amountGet\n//   } else {\n//     etherAmount = order.amountGet\n//     tokenAmount = order.amountGive\n//   }\n\n//   // Calculate token price to 5 decimal places\n//   const precision = 100000\n//   let tokenPrice = (etherAmount / tokenAmount)\n//   tokenPrice = Math.round(tokenPrice * precision) / precision\n\n//   return({\n//     ...order,\n//     etherAmount: ether(etherAmount),\n//     tokenAmount: tokens(tokenAmount),\n//     tokenPrice,\n//     formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n//   })\n// }\n\n// const decorateFilledOrder = (order, previousOrder) => {\n//   return({\n//     ...order,\n//     tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n//   })\n// }\n\n// const tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n//   // Show green price if only one order exists\n//   if(previousOrder.id === orderId) {\n//     return GREEN\n//   }\n\n//   // Show green price if order price higher than previous order\n//   // Show red price if order price lower than previous order\n//   if(previousOrder.tokenPrice <= tokenPrice) {\n//     return GREEN // success\n//   } else {\n//     return RED // danger\n//   }\n// }\n\n// const openOrders = state => {\n//   const all = allOrders(state)\n//   const filled = filledOrders(state)\n//   const cancelled = cancelledOrders(state)\n\n//   const openOrders = reject(all, (order) => {\n//     const orderFilled = filled.some((o) => o.id === order.id)\n//     const orderCancelled = cancelled.some((o) => o.id === order.id)\n//     return(orderFilled || orderCancelled)\n//   })\n\n//   return openOrders\n// }\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// Create the order book\n// export const orderBookSelector = createSelector(\n//   openOrders,\n//   (orders) => {\n//     // Decorate orders\n//     orders = decorateOrderBookOrders(orders)\n//     // Group orders by \"orderType\"\n//     orders = groupBy(orders, 'orderType')\n//     // Fetch buy orders\n//     const buyOrders = get(orders, 'buy', [])\n//     // Sort buy orders by token price\n//     orders = {\n//       ...orders,\n//       buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     // Fetch sell orders\n//     const sellOrders = get(orders, 'sell', [])\n//     // Sort sell orders by token price\n//     orders = {\n//       ...orders,\n//       sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n//     }\n//     return orders\n//   }\n// )\n\n// const decorateOrderBookOrders = (orders) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateOrderBookOrder(order)\n//       return(order)\n//     })\n//   )\n// }\n\n// const decorateOrderBookOrder = (order) => {\n//   const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n//   })\n// }\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\n// export const myFilledOrdersSelector = createSelector(\n//   account,\n//   filledOrders,\n//   (account, orders) => {\n//     // Find our orders\n//     orders = orders.filter((o) => o.user === account || o.userFill === account)\n//     // Sort by date ascending\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyFilledOrders(orders, account)\n//     return orders\n//   }\n// )\n\n// const decorateMyFilledOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyFilledOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n\n// const decorateMyFilledOrder = (order, account) => {\n//   const myOrder = order.user === account\n\n//   let orderType\n//   if(myOrder) {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n//   } else {\n//     orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n//   }\n\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n//     orderSign: (orderType === 'buy' ? '+' : '-')\n//   })\n// }\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// export const myOpenOrdersSelector = createSelector(\n//   account,\n//   openOrders,\n//   (account, orders) => {\n//     // Filter orders created by current account\n//     orders = orders.filter((o) => o.user === account)\n//     // Decorate orders - add display attributes\n//     orders = decorateMyOpenOrders(orders)\n//     // Sort orders by date descending\n//     orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n//     return orders\n//   }\n// )\n\n// const decorateMyOpenOrders = (orders, account) => {\n//   return(\n//     orders.map((order) => {\n//       order = decorateOrder(order)\n//       order = decorateMyOpenOrder(order, account)\n//       return(order)\n//     })\n//   )\n// }\n\n// const decorateMyOpenOrder = (order, account) => {\n//   let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\n//   return({\n//     ...order,\n//     orderType,\n//     orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n//   })\n// }\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\n// export const priceChartSelector = createSelector(\n//   filledOrders,\n//   (orders) => {\n//     // Sort orders by date ascending to compare history\n//     orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n//     // Decorate orders - add display attributes\n//     orders = orders.map((o) => decorateOrder(o))\n//     // Get last 2 order for final price & price change\n//     let secondLastOrder, lastOrder\n//     [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\n//     // get last order price\n//     const lastPrice = get(lastOrder, 'tokenPrice', 0)\n//     // get second last order price\n//     const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n\n//     return({\n//       lastPrice,\n//       lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n//       series: [{\n//         data: buildGraphData(orders)\n//       }]\n//     })\n//   }\n// )\n\nconst buildGraphData = (orders) => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\n  // Get each hour where data exists\n  const hours = Object.keys(orders)\n  // Build the graph series\n  const graphData = hours.map((hour) => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]\n    // Calculate price values - open, high, low, close\n    const open = group[0] // first order\n    const high = maxBy(group, 'tokenPrice') // high price\n    const low = minBy(group, 'tokenPrice') // low price\n    const close = group[group.length - 1] // last order\n\n    return({\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    })\n  })\n\n  return graphData\n}\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\n\n// BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\n\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\n\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\n\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\n\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\nexport const buyOrderSelector = createSelector(buyOrder, order => order)\n\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\nexport const sellOrderSelector = createSelector(sellOrder, order => order)\n"]},"metadata":{},"sourceType":"module"}